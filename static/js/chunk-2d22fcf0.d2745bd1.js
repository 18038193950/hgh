(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d22fcf0"],{ea31:function(e,n,a){"use strict";a.r(n);var t=function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("div",{staticClass:"app-container"},[a("el-collapse",{model:{value:e.activeNames,callback:function(n){e.activeNames=n},expression:"activeNames"}},[a("el-collapse-item",{attrs:{title:"参数传递",name:"1"}},[a("pre",{directives:[{name:"highlight",rawName:"v-highlight"}]},[e._v("              "),a("code",{staticClass:"js"},[e._v("\n                vm.$attrs\n                vm.$listeners\n\n               提示：provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的 property 还是可响应的。\n\n                // 父级组件提供 'foo'\n                var Provider = {\n                  provide: {\n                    foo: 'bar'\n                  },\n                  // ...\n                }\n\n                // 子组件注入 'foo'\n                var Child = {\n                  inject: ['foo'],\n                  created () {\n                    console.log(this.foo) // => \"bar\"\n                  }\n                  // ...\n                }\n              ")]),e._v("\n         ")])])],1)],1)},i=[],c={data:function(){return{activeNames:[]}}},o=c,s=a("2877"),r=Object(s["a"])(o,t,i,!1,null,"50a6cc9c",null);n["default"]=r.exports}}]);
//# sourceMappingURL=chunk-2d22fcf0.d2745bd1.js.map