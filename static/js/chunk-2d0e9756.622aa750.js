(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0e9756"],{"8e2e":function(e,n,t){"use strict";t.r(n);var r=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[t("div",{staticClass:"app-container"},[t("el-collapse",{model:{value:e.activeNames,callback:function(n){e.activeNames=n},expression:"activeNames"}},[t("el-collapse-item",{attrs:{title:"FormData - 提交",name:"1"}},[t("pre",{directives:[{name:"highlight",rawName:"v-highlight"}]},[e._v("              "),t("code",{staticClass:"js"},[e._v("\n                   // Ocr\n                      // id 身份证\n                      // vechicleLicense 驾驶证\n                      export const ocrRecongnize = data => {\n                      const param = new FormData()\n                      param.append('img', data.img)\n                      param.append('category', data.category)\n                      return request({\n                          url: '/xxx/x',\n                          method: 'post',\n                          data: param\n                      })\n                      }\n              ")]),e._v("\n              ")])]),t("el-collapse-item",{attrs:{title:"流 - 提交",name:"2"}},[t("pre",{directives:[{name:"highlight",rawName:"v-highlight"}]},[e._v("              "),t("code",{staticClass:"js"},[e._v("\n                  // pdf 流\n                  const getFileStream = (params) => {\n                  return request({\n                      url: '/x x x/x x x',\n                      method: 'get',\n                      responseType: 'blob',\n                      params\n                  })\n                  }\n              ")]),e._v("\n              ")])]),t("el-collapse-item",{attrs:{title:"FormData - 提交",name:"3"}},[t("pre",{directives:[{name:"highlight",rawName:"v-highlight"}]},[e._v("              "),t("code",{staticClass:"js"},[e._v("\n                   // Ocr\n                      // id 身份证\n                      // vechicleLicense 驾驶证\n                      export const ocrRecongnize = data => {\n                      const param = new FormData()\n                      param.append('img', data.img)\n                      param.append('category', data.category)\n                      return request({\n                          url: '/xxx/x',\n                          method: 'post',\n                          data: param\n                      })\n                      }\n              ")]),e._v("\n              ")])]),t("el-collapse-item",{attrs:{title:"图片验证码： - 提交",name:"4"}},[t("pre",{directives:[{name:"highlight",rawName:"v-highlight"}]},[e._v("              "),t("code",{staticClass:"js"},[e._v("\n                     // 图片验证码：\n                  export const verifyCode = (param) => {\n                  return request({\n                      responseType: 'arraybuffer',\n                      url: '/ cc / cc', // 数字\n                      method: 'get',\n                      params: param\n                  })\n                  }\n              ")]),e._v("\n              ")])]),t("el-collapse-item",{attrs:{title:"axios - 拦截",name:"5"}},[t("pre",{directives:[{name:"highlight",rawName:"v-highlight"}]},[e._v("              "),t("code",{staticClass:"js"},[e._v("\n                 import axios from 'axios'\n                  import { Dialog } from 'vant'\n\n                  axios.defaults.withCredentials = true\n                  // 创建axios 实例\n                  const service = axios.create({\n                  baseURL: process.env.NODE_ENV === 'production' ? '/ae' : '/ae', // api的base_url\n                  timeout: 10000 * 10 // 请求超时时间\n                  })\n\n                  // request 拦截器\n                  service.interceptors.request.use(\n                  config => {\n                      // 这里可以自定义一些config配置\n                      const token = Vue.ls.get(ACCESS_TOKEN)\n                          const JSESSIONID = VueCookies.get('JSESSIONID')\n                          const CAS_TGC = VueCookies.get('CAS_TGC')\n                          if (token) {\n                              config.headers['Authorization'] = 'Arch6WithCloud ' + token // 让每个请求携带自定义 token 请根据实际情况自行修改\n                          } else {\n                              config.headers['Authorization'] = 'Arch6WithCloud ' // 让每个请求携带自定义 token 请根据实际情况自行修改\n                          }\n                      return config\n                  },\n                  error => {\n                      // 处理一些请求出错的情况\n                      Promise.reject(error)\n                  }\n                  )\n\n                  // response 拦截器\n                  service.interceptors.response.use(\n                  response => {\n                      const res = response.data\n\n                      // console.log(response.headers['content-type'])\n                      // 这里处理一些response 正常放回时的逻辑\n                      if (response.headers['content-type'] && ['image/jpeg;charset=utf-8', 'image/png;charset=utf-8'].includes(response.headers['content-type'].replace(/\\s+/g, ''))) return res\n\n                      if (['application/vnd.ms-excel', 'application/octet-stream', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'].includes(response.headers['content-type']) && response.data) {\n                      const filename = response.headers['content-disposition'].split(';').reduce((r, i) => {\n                      const [type, value] = i.split('=')\n                      return trim(type) === 'filename' ? value.replace(new RegExp('\"', 'g'), '') : r\n                      })\n                      const url = window.URL.createObjectURL(new Blob([response.data], { type: response.headers['content-type'] }))\n                      const link = document.createElement('a')\n                      link.style.display = 'none'\n                      link.href = url\n                      link.setAttribute('download', filename)\n                      document.body.appendChild(link)\n                      link.click()\n                      return null\n\n                  const message = res.message || ''\n                      if (+res.code !== 0) {\n                      if (+res.code === 401 || message.includes('您尚未登录')) { // 如果是401 未登陆重新刷新页面\n                          window.location.reload()\n                          return Promise.reject(message)\n                      }\n                      const title = res.title || '温馨提示'\n                      if (message) {\n                          Dialog.alert({\n                          title: title,\n                          message: message\n                          }).then(() => {\n                          // on confirm\n                          })\n                          return Promise.reject(message)\n                      }\n                      return Promise.reject(message)\n                      }\n                      return res.data\n                  },\n                  (error) => {\n                      console.log('err: ' + error.message, JSON.parse(JSON.stringify(error))) // for debug\n                      return Promise.reject(error)\n                  }\n                  )\n                  export default service\n              ")]),e._v("\n              ")])])],1)],1)])},a=[],s={name:"WhRequest",data:function(){return{activeNames:[]}}},o=s,i=t("2877"),c=Object(i["a"])(o,r,a,!1,null,"4a8f7788",null);n["default"]=c.exports}}]);
//# sourceMappingURL=chunk-2d0e9756.622aa750.js.map