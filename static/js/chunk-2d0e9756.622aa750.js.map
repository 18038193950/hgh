{"version":3,"sources":["webpack:///./src/views/example/wh-request/index.vue?553d","webpack:///src/views/example/wh-request/index.vue","webpack:///./src/views/example/wh-request/index.vue?a7bc","webpack:///./src/views/example/wh-request/index.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","model","value","callback","$$v","activeNames","expression","attrs","directives","name","rawName","_v","staticRenderFns","data","component"],"mappings":"yHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACA,EAAG,MAAM,CAACE,YAAY,iBAAiB,CAACF,EAAG,cAAc,CAACG,MAAM,CAACC,MAAOR,EAAe,YAAES,SAAS,SAAUC,GAAMV,EAAIW,YAAYD,GAAKE,WAAW,gBAAgB,CAACR,EAAG,mBAAmB,CAACS,MAAM,CAAC,MAAQ,gBAAgB,KAAO,MAAM,CAACT,EAAG,MAAM,CAACU,WAAW,CAAC,CAACC,KAAK,YAAYC,QAAQ,iBAAiB,CAAChB,EAAIiB,GAAG,kBAAkBb,EAAG,OAAO,CAACE,YAAY,MAAM,CAACN,EAAIiB,GAAG,6jBAA6jBjB,EAAIiB,GAAG,wBAAwBb,EAAG,mBAAmB,CAACS,MAAM,CAAC,MAAQ,SAAS,KAAO,MAAM,CAACT,EAAG,MAAM,CAACU,WAAW,CAAC,CAACC,KAAK,YAAYC,QAAQ,iBAAiB,CAAChB,EAAIiB,GAAG,kBAAkBb,EAAG,OAAO,CAACE,YAAY,MAAM,CAACN,EAAIiB,GAAG,qVAAqVjB,EAAIiB,GAAG,wBAAwBb,EAAG,mBAAmB,CAACS,MAAM,CAAC,MAAQ,gBAAgB,KAAO,MAAM,CAACT,EAAG,MAAM,CAACU,WAAW,CAAC,CAACC,KAAK,YAAYC,QAAQ,iBAAiB,CAAChB,EAAIiB,GAAG,kBAAkBb,EAAG,OAAO,CAACE,YAAY,MAAM,CAACN,EAAIiB,GAAG,6jBAA6jBjB,EAAIiB,GAAG,wBAAwBb,EAAG,mBAAmB,CAACS,MAAM,CAAC,MAAQ,cAAc,KAAO,MAAM,CAACT,EAAG,MAAM,CAACU,WAAW,CAAC,CAACC,KAAK,YAAYC,QAAQ,iBAAiB,CAAChB,EAAIiB,GAAG,kBAAkBb,EAAG,OAAO,CAACE,YAAY,MAAM,CAACN,EAAIiB,GAAG,6WAA6WjB,EAAIiB,GAAG,wBAAwBb,EAAG,mBAAmB,CAACS,MAAM,CAAC,MAAQ,aAAa,KAAO,MAAM,CAACT,EAAG,MAAM,CAACU,WAAW,CAAC,CAACC,KAAK,YAAYC,QAAQ,iBAAiB,CAAChB,EAAIiB,GAAG,kBAAkBb,EAAG,OAAO,CAACE,YAAY,MAAM,CAACN,EAAIiB,GAAG,q6HAAq6HjB,EAAIiB,GAAG,yBAAyB,IAAI,MACllOC,EAAkB,GCkKtB,GACEH,KAAM,YACNI,KAFF,WAGI,MAAO,CACLR,YAAa,MCvK0V,I,YCOzWS,EAAY,eACd,EACArB,EACAmB,GACA,EACA,KACA,WACA,MAIa,aAAAE,E","file":"static/js/chunk-2d0e9756.622aa750.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:\"app-container\"},[_c('el-collapse',{model:{value:(_vm.activeNames),callback:function ($$v) {_vm.activeNames=$$v},expression:\"activeNames\"}},[_c('el-collapse-item',{attrs:{\"title\":\"FormData - 提交\",\"name\":\"1\"}},[_c('pre',{directives:[{name:\"highlight\",rawName:\"v-highlight\"}]},[_vm._v(\"              \"),_c('code',{staticClass:\"js\"},[_vm._v(\"\\n                   // Ocr\\n                      // id 身份证\\n                      // vechicleLicense 驾驶证\\n                      export const ocrRecongnize = data => {\\n                      const param = new FormData()\\n                      param.append('img', data.img)\\n                      param.append('category', data.category)\\n                      return request({\\n                          url: '/xxx/x',\\n                          method: 'post',\\n                          data: param\\n                      })\\n                      }\\n              \")]),_vm._v(\"\\n              \")])]),_c('el-collapse-item',{attrs:{\"title\":\"流 - 提交\",\"name\":\"2\"}},[_c('pre',{directives:[{name:\"highlight\",rawName:\"v-highlight\"}]},[_vm._v(\"              \"),_c('code',{staticClass:\"js\"},[_vm._v(\"\\n                  // pdf 流\\n                  const getFileStream = (params) => {\\n                  return request({\\n                      url: '/x x x/x x x',\\n                      method: 'get',\\n                      responseType: 'blob',\\n                      params\\n                  })\\n                  }\\n              \")]),_vm._v(\"\\n              \")])]),_c('el-collapse-item',{attrs:{\"title\":\"FormData - 提交\",\"name\":\"3\"}},[_c('pre',{directives:[{name:\"highlight\",rawName:\"v-highlight\"}]},[_vm._v(\"              \"),_c('code',{staticClass:\"js\"},[_vm._v(\"\\n                   // Ocr\\n                      // id 身份证\\n                      // vechicleLicense 驾驶证\\n                      export const ocrRecongnize = data => {\\n                      const param = new FormData()\\n                      param.append('img', data.img)\\n                      param.append('category', data.category)\\n                      return request({\\n                          url: '/xxx/x',\\n                          method: 'post',\\n                          data: param\\n                      })\\n                      }\\n              \")]),_vm._v(\"\\n              \")])]),_c('el-collapse-item',{attrs:{\"title\":\"图片验证码： - 提交\",\"name\":\"4\"}},[_c('pre',{directives:[{name:\"highlight\",rawName:\"v-highlight\"}]},[_vm._v(\"              \"),_c('code',{staticClass:\"js\"},[_vm._v(\"\\n                     // 图片验证码：\\n                  export const verifyCode = (param) => {\\n                  return request({\\n                      responseType: 'arraybuffer',\\n                      url: '/ cc / cc', // 数字\\n                      method: 'get',\\n                      params: param\\n                  })\\n                  }\\n              \")]),_vm._v(\"\\n              \")])]),_c('el-collapse-item',{attrs:{\"title\":\"axios - 拦截\",\"name\":\"5\"}},[_c('pre',{directives:[{name:\"highlight\",rawName:\"v-highlight\"}]},[_vm._v(\"              \"),_c('code',{staticClass:\"js\"},[_vm._v(\"\\n                 import axios from 'axios'\\n                  import { Dialog } from 'vant'\\n\\n                  axios.defaults.withCredentials = true\\n                  // 创建axios 实例\\n                  const service = axios.create({\\n                  baseURL: process.env.NODE_ENV === 'production' ? '/ae' : '/ae', // api的base_url\\n                  timeout: 10000 * 10 // 请求超时时间\\n                  })\\n\\n                  // request 拦截器\\n                  service.interceptors.request.use(\\n                  config => {\\n                      // 这里可以自定义一些config配置\\n                      const token = Vue.ls.get(ACCESS_TOKEN)\\n                          const JSESSIONID = VueCookies.get('JSESSIONID')\\n                          const CAS_TGC = VueCookies.get('CAS_TGC')\\n                          if (token) {\\n                              config.headers['Authorization'] = 'Arch6WithCloud ' + token // 让每个请求携带自定义 token 请根据实际情况自行修改\\n                          } else {\\n                              config.headers['Authorization'] = 'Arch6WithCloud ' // 让每个请求携带自定义 token 请根据实际情况自行修改\\n                          }\\n                      return config\\n                  },\\n                  error => {\\n                      // 处理一些请求出错的情况\\n                      Promise.reject(error)\\n                  }\\n                  )\\n\\n                  // response 拦截器\\n                  service.interceptors.response.use(\\n                  response => {\\n                      const res = response.data\\n\\n                      // console.log(response.headers['content-type'])\\n                      // 这里处理一些response 正常放回时的逻辑\\n                      if (response.headers['content-type'] && ['image/jpeg;charset=utf-8', 'image/png;charset=utf-8'].includes(response.headers['content-type'].replace(/\\\\s+/g, ''))) return res\\n\\n                      if (['application/vnd.ms-excel', 'application/octet-stream', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'].includes(response.headers['content-type']) && response.data) {\\n                      const filename = response.headers['content-disposition'].split(';').reduce((r, i) => {\\n                      const [type, value] = i.split('=')\\n                      return trim(type) === 'filename' ? value.replace(new RegExp('\\\"', 'g'), '') : r\\n                      })\\n                      const url = window.URL.createObjectURL(new Blob([response.data], { type: response.headers['content-type'] }))\\n                      const link = document.createElement('a')\\n                      link.style.display = 'none'\\n                      link.href = url\\n                      link.setAttribute('download', filename)\\n                      document.body.appendChild(link)\\n                      link.click()\\n                      return null\\n\\n                  const message = res.message || ''\\n                      if (+res.code !== 0) {\\n                      if (+res.code === 401 || message.includes('您尚未登录')) { // 如果是401 未登陆重新刷新页面\\n                          window.location.reload()\\n                          return Promise.reject(message)\\n                      }\\n                      const title = res.title || '温馨提示'\\n                      if (message) {\\n                          Dialog.alert({\\n                          title: title,\\n                          message: message\\n                          }).then(() => {\\n                          // on confirm\\n                          })\\n                          return Promise.reject(message)\\n                      }\\n                      return Promise.reject(message)\\n                      }\\n                      return res.data\\n                  },\\n                  (error) => {\\n                      console.log('err: ' + error.message, JSON.parse(JSON.stringify(error))) // for debug\\n                      return Promise.reject(error)\\n                  }\\n                  )\\n                  export default service\\n              \")]),_vm._v(\"\\n              \")])])],1)],1)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div>\n    <div class=\"app-container\">\n      <el-collapse v-model=\"activeNames\">\n        <el-collapse-item title=\"FormData - 提交\" name=\"1\">\n          <pre v-highlight>\n                <code class=\"js\">\n                     // Ocr\n                        // id 身份证\n                        // vechicleLicense 驾驶证\n                        export const ocrRecongnize = data => {\n                        const param = new FormData()\n                        param.append('img', data.img)\n                        param.append('category', data.category)\n                        return request({\n                            url: '/xxx/x',\n                            method: 'post',\n                            data: param\n                        })\n                        }\n                </code>\n                </pre>\n        </el-collapse-item>\n        <el-collapse-item title=\"流 - 提交\" name=\"2\">\n          <pre v-highlight>\n                <code class=\"js\">\n                    // pdf 流\n                    const getFileStream = (params) => {\n                    return request({\n                        url: '/x x x/x x x',\n                        method: 'get',\n                        responseType: 'blob',\n                        params\n                    })\n                    }\n                </code>\n                </pre>\n        </el-collapse-item>\n        <el-collapse-item title=\"FormData - 提交\" name=\"3\">\n          <pre v-highlight>\n                <code class=\"js\">\n                     // Ocr\n                        // id 身份证\n                        // vechicleLicense 驾驶证\n                        export const ocrRecongnize = data => {\n                        const param = new FormData()\n                        param.append('img', data.img)\n                        param.append('category', data.category)\n                        return request({\n                            url: '/xxx/x',\n                            method: 'post',\n                            data: param\n                        })\n                        }\n                </code>\n                </pre>\n        </el-collapse-item>\n        <el-collapse-item title=\"图片验证码： - 提交\" name=\"4\">\n          <pre v-highlight>\n                <code class=\"js\">\n                       // 图片验证码：\n                    export const verifyCode = (param) => {\n                    return request({\n                        responseType: 'arraybuffer',\n                        url: '/ cc / cc', // 数字\n                        method: 'get',\n                        params: param\n                    })\n                    }\n                </code>\n                </pre>\n        </el-collapse-item>\n        <el-collapse-item title=\"axios - 拦截\" name=\"5\">\n          <pre v-highlight>\n                <code class=\"js\">\n                   import axios from 'axios'\n                    import { Dialog } from 'vant'\n\n                    axios.defaults.withCredentials = true\n                    // 创建axios 实例\n                    const service = axios.create({\n                    baseURL: process.env.NODE_ENV === 'production' ? '/ae' : '/ae', // api的base_url\n                    timeout: 10000 * 10 // 请求超时时间\n                    })\n\n                    // request 拦截器\n                    service.interceptors.request.use(\n                    config => {\n                        // 这里可以自定义一些config配置\n                        const token = Vue.ls.get(ACCESS_TOKEN)\n                            const JSESSIONID = VueCookies.get('JSESSIONID')\n                            const CAS_TGC = VueCookies.get('CAS_TGC')\n                            if (token) {\n                                config.headers['Authorization'] = 'Arch6WithCloud ' + token // 让每个请求携带自定义 token 请根据实际情况自行修改\n                            } else {\n                                config.headers['Authorization'] = 'Arch6WithCloud ' // 让每个请求携带自定义 token 请根据实际情况自行修改\n                            }\n                        return config\n                    },\n                    error => {\n                        // 处理一些请求出错的情况\n                        Promise.reject(error)\n                    }\n                    )\n\n                    // response 拦截器\n                    service.interceptors.response.use(\n                    response => {\n                        const res = response.data\n\n                        // console.log(response.headers['content-type'])\n                        // 这里处理一些response 正常放回时的逻辑\n                        if (response.headers['content-type'] && ['image/jpeg;charset=utf-8', 'image/png;charset=utf-8'].includes(response.headers['content-type'].replace(/\\s+/g, ''))) return res\n\n                        if (['application/vnd.ms-excel', 'application/octet-stream', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'].includes(response.headers['content-type']) && response.data) {\n                        const filename = response.headers['content-disposition'].split(';').reduce((r, i) => {\n                        const [type, value] = i.split('=')\n                        return trim(type) === 'filename' ? value.replace(new RegExp('\"', 'g'), '') : r\n                        })\n                        const url = window.URL.createObjectURL(new Blob([response.data], { type: response.headers['content-type'] }))\n                        const link = document.createElement('a')\n                        link.style.display = 'none'\n                        link.href = url\n                        link.setAttribute('download', filename)\n                        document.body.appendChild(link)\n                        link.click()\n                        return null\n\n                    const message = res.message || ''\n                        if (+res.code !== 0) {\n                        if (+res.code === 401 || message.includes('您尚未登录')) { // 如果是401 未登陆重新刷新页面\n                            window.location.reload()\n                            return Promise.reject(message)\n                        }\n                        const title = res.title || '温馨提示'\n                        if (message) {\n                            Dialog.alert({\n                            title: title,\n                            message: message\n                            }).then(() => {\n                            // on confirm\n                            })\n                            return Promise.reject(message)\n                        }\n                        return Promise.reject(message)\n                        }\n                        return res.data\n                    },\n                    (error) => {\n                        console.log('err: ' + error.message, JSON.parse(JSON.stringify(error))) // for debug\n                        return Promise.reject(error)\n                    }\n                    )\n                    export default service\n                </code>\n                </pre>\n        </el-collapse-item>\n      </el-collapse>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'WhRequest',\n  data() {\n    return {\n      activeNames: []\n    }\n  }\n}\n</script>\n<style lang='scss' scoped>\n\n</style>\n","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=4a8f7788&scoped=true&\"\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"4a8f7788\",\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}